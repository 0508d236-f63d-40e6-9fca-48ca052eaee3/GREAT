#!/bin/bash

# ๐ ุณูุฑูุจุช ุฅุนุฏุงุฏ ุงููุดุฑ ุงูุชููุงุฆู ุงูุดุงูู

echo "๐ ุจุฏุก ุฅุนุฏุงุฏ ุงููุดุฑ ุงูุชููุงุฆู..."

# ุงูุชุญูู ูู ุงููุชุทูุจุงุช
echo "๐ ูุญุต ุงููุชุทูุจุงุช..."

# ูุญุต Git
if ! command -v git &> /dev/null; then
    echo "โ Git ุบูุฑ ูุซุจุช. ูุฑุฌู ุชุซุจูุช Git ุฃููุงู."
    exit 1
fi

# ูุญุต Node.js
if ! command -v node &> /dev/null; then
    echo "โ Node.js ุบูุฑ ูุซุจุช. ูุฑุฌู ุชุซุจูุช Node.js ุฃููุงู."
    exit 1
fi

# ูุญุต npm
if ! command -v npm &> /dev/null; then
    echo "โ npm ุบูุฑ ูุชุงุญ. ูุฑุฌู ุชุซุจูุช npm ุฃููุงู."
    exit 1
fi

echo "โ ุฌููุน ุงููุชุทูุจุงุช ูุชููุฑุฉ"

# ุฅุนุฏุงุฏ ุงููุณุชูุฏุน
echo "๐ ุฅุนุฏุงุฏ ุงููุณุชูุฏุน..."

# ุงูุชุญูู ูู ูุฌูุฏ .git
if [ ! -d ".git" ]; then
    echo "๐ง ุชููุฆุฉ ูุณุชูุฏุน Git..."
    git init
    git branch -M main
fi

# ุฅุถุงูุฉ .gitignore ุฅุฐุง ูู ููู ููุฌูุฏุงู
if [ ! -f ".gitignore" ]; then
    echo "๐ ุฅูุดุงุก .gitignore..."
    cat > .gitignore << EOL
# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Next.js
.next/
out/
build/

# Production
dist/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Vercel
.vercel

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
EOL
fi

# ุฅูุดุงุก ูุฌูุฏ GitHub Actions
echo "โ๏ธ ุฅุนุฏุงุฏ GitHub Actions..."
mkdir -p .github/workflows

# ุฅูุดุงุก workflow ูููุดุฑ ุงูุชููุงุฆู
cat > .github/workflows/auto-deploy.yml << EOL
name: ๐ Auto Deploy to Vercel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: ๐ฅ Checkout code
      uses: actions/checkout@v4
      
    - name: ๐ข Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: ๐ฆ Install dependencies
      run: npm ci
      
    - name: ๐จ Build project
      run: npm run build
      
    - name: ๐งช Run tests
      run: npm test --if-present
      
    - name: ๐ Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: \${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: \${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: \${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    - name: ๐ Deployment Status
      run: |
        echo "โ ุงููุดุฑ ููุชูู!"
        echo "๐ ุงููููุน ูุชุงุญ ุนูู: https://\${{ steps.deploy.outputs.preview-url }}"
EOL

# ุฅูุดุงุก ููู vercel.json
echo "โ๏ธ ุฅุนุฏุงุฏ Vercel..."
cat > vercel.json << EOL
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/\$1"
    },
    {
      "src": "/(.*)",
      "dest": "/\$1"
    }
  ],
  "env": {
    "NEXT_PUBLIC_VERCEL_ENV": "production",
    "NEXT_PUBLIC_APP_NAME": "CryptoTracker"
  },
  "github": {
    "enabled": true,
    "autoAlias": true,
    "autoJobCancelation": true
  },
  "functions": {
    "app/api/**/*.ts": {
      "maxDuration": 30
    }
  }
}
EOL

# ุชุญุฏูุซ package.json
echo "๐ฆ ุชุญุฏูุซ package.json..."
if [ -f "package.json" ]; then
    # ุฅุถุงูุฉ ุณูุฑูุจุชุงุช ุงููุดุฑ
    npm pkg set scripts.deploy="vercel --prod"
    npm pkg set scripts.deploy:preview="vercel"
    npm pkg set scripts.build:analyze="ANALYZE=true npm run build"
    
    # ุฅุถุงูุฉ ูุนูููุงุช ุงููุณุชูุฏุน
    read -p "๐ ุฃุฏุฎู ุฑุงุจุท ุงููุณุชูุฏุน (ูุซุงู: https://github.com/username/repo): " REPO_URL
    if [ ! -z "$REPO_URL" ]; then
        npm pkg set repository.type="git"
        npm pkg set repository.url="$REPO_URL"
    fi
fi

# ุฅูุดุงุก ุณูุฑูุจุช ุงููุดุฑ ุงูุณุฑูุน
echo "โก ุฅูุดุงุก ุณูุฑูุจุช ุงููุดุฑ ุงูุณุฑูุน..."
cat > quick-deploy.sh << EOL
#!/bin/bash

echo "๐ ุงููุดุฑ ุงูุณุฑูุน..."

# ูุญุต ุงูุชุบููุฑุงุช
if [ -n "\$(git status --porcelain)" ]; then
  echo "๐ ุญูุธ ุงูุชุบููุฑุงุช..."
  git add .
  
  # ุทูุจ ุฑุณุงูุฉ commit
  read -p "๐ฌ ุฃุฏุฎู ุฑุณุงูุฉ ุงูุชุญุฏูุซ: " COMMIT_MSG
  if [ -z "\$COMMIT_MSG" ]; then
    COMMIT_MSG="Auto-update: \$(date '+%Y-%m-%d %H:%M:%S')"
  fi
  
  git commit -m "\$COMMIT_MSG"
fi

# ุฑูุน ุงูุชุญุฏูุซุงุช
echo "๐ค ุฑูุน ุงูุชุญุฏูุซุงุช..."
git push origin main

echo "โ ุชู ุฑูุน ุงูุชุญุฏูุซุงุช!"
echo "โณ ุณูุชู ุงููุดุฑ ุชููุงุฆูุงู ุฎูุงู ุฏูุงุฆู..."
echo "๐ ุฑุงูุจ ุงูุชูุฏู ุนูู: https://vercel.com/dashboard"
EOL

chmod +x quick-deploy.sh

# ุฅูุดุงุก ููู ุงูุจูุฆุฉ ุงููุซุงู
echo "๐ง ุฅูุดุงุก ููู ุงูุจูุฆุฉ ุงููุซุงู..."
cat > .env.example << EOL
# Vercel Configuration
VERCEL_TOKEN=your_vercel_token_here
VERCEL_TEAM_ID=your_team_id_here
VERCEL_PROJECT_ID=your_project_id_here

# GitHub Configuration
GITHUB_TOKEN=your_github_token_here

# App Configuration
NEXT_PUBLIC_APP_NAME=CryptoTracker
NEXT_PUBLIC_VERCEL_ENV=production
NEXT_PUBLIC_VERSION=1.0.0
EOL

# ุฅูุดุงุก ุฏููู ุงูุฅุนุฏุงุฏ
echo "๐ ุฅูุดุงุก ุฏููู ุงูุฅุนุฏุงุฏ..."
cat > SETUP_INSTRUCTIONS.md << EOL
# ๐ ุฏููู ุฅุนุฏุงุฏ ุงููุดุฑ ุงูุชููุงุฆู

## ุงูุฎุทูุงุช ุงููุทููุจุฉ:

### 1. ุฅุนุฏุงุฏ Vercel:
1. ุงุฐูุจ ุฅูู [vercel.com](https://vercel.com)
2. ุฃูุดุฆ ุญุณุงุจ ุฃู ุณุฌู ุฏุฎูู
3. ุงุฑุจุท ุญุณุงุจู ุจู GitHub
4. ุงุณุชูุฑุฏ ูุฐุง ุงููุดุฑูุน

### 2. ุงูุญุตูู ุนูู ุงูููุงุชูุญ:
1. **Vercel Token**: Settings > Tokens > Create
2. **Team ID**: Settings > General > Team ID
3. **Project ID**: Project Settings > General > Project ID

### 3. ุฅุนุฏุงุฏ GitHub Secrets:
1. ุงุฐูุจ ุฅูู ูุณุชูุฏุนู ูู GitHub
2. Settings > Secrets and variables > Actions
3. ุฃุถู ุงููุชุบูุฑุงุช ุงูุชุงููุฉ:
   - \`VERCEL_TOKEN\`
   - \`VERCEL_ORG_ID\`
   - \`VERCEL_PROJECT_ID\`

### 4. ุชูุนูู ุงููุดุฑ ุงูุชููุงุฆู:
\`\`\`bash
# ูุณุฎ ููู ุงูุจูุฆุฉ ูุชุนุฏููู
cp .env.example .env.local

# ุชุดุบูู ุงููุดุฑ ุงูุณุฑูุน
./quick-deploy.sh
\`\`\`

## ๐ ุชู ุงูุฅุนุฏุงุฏ!
ุงูุขู ูู push ุฅูู main ุณูุคุฏู ุฅูู ูุดุฑ ุชููุงุฆู.
EOL

# ุฅูุดุงุก ุฃูู commit
echo "๐ ุฅูุดุงุก ุฃูู commit..."
git add .

if [ -z "$(git config user.name)" ]; then
    read -p "๐ค ุฃุฏุฎู ุงุณูู ููู Git: " GIT_NAME
    git config user.name "$GIT_NAME"
fi

if [ -z "$(git config user.email)" ]; then
    read -p "๐ง ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู ููู Git: " GIT_EMAIL
    git config user.email "$GIT_EMAIL"
fi

git commit -m "๐ Setup: Auto deployment system configured

- Added GitHub Actions workflow
- Configured Vercel deployment
- Created deployment scripts
- Added environment configuration
- Setup project structure for auto-deployment"

echo ""
echo "๐ ุชู ุฅุนุฏุงุฏ ุงููุดุฑ ุงูุชููุงุฆู ุจูุฌุงุญ!"
echo ""
echo "๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:"
echo "1. ุงุฑูุน ุงููุดุฑูุน ุฅูู GitHub"
echo "2. ุงุฑุจุท ุงููุดุฑูุน ุจู Vercel"
echo "3. ุฃุถู ุงููุชุบูุฑุงุช ุงููุทููุจุฉ"
echo "4. ุงุณุชุฎุฏู ./quick-deploy.sh ูููุดุฑ ุงูุณุฑูุน"
echo ""
echo "๐ ุฑุงุฌุน SETUP_INSTRUCTIONS.md ููุชูุงุตูู ุงููุงููุฉ"
echo ""
echo "๐ ูููุนู ุณูุชุญุฏุซ ุชููุงุฆูุงู ูุน ูู push!"
